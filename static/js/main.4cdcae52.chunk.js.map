{"version":3,"sources":["Components/Dashboard.tsx","Components/Welcome.tsx","Components/Error.tsx","Components/Loading.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Dashboard","weather","date","Date","month","getMonth","day","toDateString","slice","daily","length","shift","weeklyComponents","map","className","key","dt","unixSeconds","src","icon","alt","Math","round","temp","getDate","current","main","Welcome","Error","errorMessage","target","href","rel","toString","Loading","id","App","useState","searchQuery","changeSearchQuery","mainComponent","setMainComponent","image","setImage","handleSubmit","e","a","preventDefault","Axios","get","process","data","coord","lat","lon","onSubmit","type","value","onChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4cdcae52.chunk.js","sourcesContent":["import React from 'react';\nimport './Dashboard.css';\n\ninterface Props {\n    weather: {\n        [key: string]: any;\n    };\n}\n\ninterface Day {\n    dt: number;\n    temp: {\n        day: number;\n    };\n    weather: [{ icon: string }];\n}\n\nconst getDay = (unixSeconds: number): string => {\n    const date = new Date(unixSeconds * 1000);\n    return date.toDateString().slice(0, 3);\n};\n\nconst Dashboard: React.FC<Props> = ({ weather }) => {\n    const monthNames = [\n        'January',\n        'February',\n        'March',\n        'April',\n        'May',\n        'June',\n        'July',\n        'August',\n        'September',\n        'October',\n        'November',\n        'December',\n    ];\n\n    const date = new Date();\n    const month = monthNames[date.getMonth()];\n    const day = date.toDateString().slice(0, 3);\n    if (weather.daily.length === 8) weather.daily.shift();\n\n    const weeklyComponents = weather.daily.map((day: Day) => {\n        return (\n            <div className='Dashboard-day-container' key={day.dt}>\n                <span>{getDay(day.dt)}</span>\n                <img\n                    src={`http://openweathermap.org/img/wn/${day.weather[0].icon}@2x.png`}\n                    alt=''\n                />\n                <span>{Math.round(day.temp.day)}°</span>\n            </div>\n        );\n    });\n\n    return (\n        <div className='Dashboard'>\n            <h1 className='Dashboard-date'>\n                {day} {date.getDate()} <br /> {month}\n            </h1>\n            <div className='Dashboard-temperature-container'>\n                <h1 className={`Dashboard-temperature ${weather.current.weather[0].main}`}>\n                    {Math.round(weather.current.temp)}°\n                </h1>\n                <img\n                    src={`http://openweathermap.org/img/wn/${weather.current.weather[0].icon}@4x.png`}\n                    alt=''\n                />\n            </div>\n            <div className='Dashboard-weekly-container'>{weeklyComponents}</div>\n        </div>\n    );\n};\n\nexport default Dashboard;\n","import React from 'react';\nimport './Welcome.css';\n\nconst Welcome: React.FC = () => {\n    return (\n        <div className='Welcome'>\n            <h1 className='Welcome-message'>Welcome! Start by typing a city up above</h1>\n        </div>\n    );\n};\n\nexport default Welcome;\n","import React from 'react';\nimport './Error.css';\n\ninterface Props {\n    errorMessage: string;\n}\n\nconst Error: React.FC<Props> = ({ errorMessage }) => {\n    return (\n        <div className='Error'>\n            <h4>\n                Oops! There was a problem, perhaps you miss-spelled the location or it is not a\n                valid location in the{' '}\n                <a target='_blank' href='https://openweathermap.org/api' rel='noopener noreferrer'>\n                    API\n                </a>\n            </h4>\n            <h4 className='Error-message'>{errorMessage.toString()}</h4>\n        </div>\n    );\n};\n\nexport default Error;\n","import React from 'react';\nimport './Loading.css';\n\nconst Loading: React.FC = () => {\n    return (\n        <div className='Loading'>\n            <div id='loader-wrapper'>\n                <div id='loader'></div>\n\n                <div className='loader-section section-left'></div>\n                <div className='loader-section section-right'></div>\n            </div>\n        </div>\n    );\n};\n\nexport default Loading;\n","import Axios from 'axios';\nimport React, { useState } from 'react';\nimport './App.css';\nimport Dashboard from './Components/Dashboard';\nimport Welcome from './Components/Welcome';\nimport Error from './Components/Error';\nimport Loading from './Components/Loading';\n\n//Design: https://dribbble.com/vowles/projects/491714-Weather-project\n// https://medium.muz.li/weather-app-inspiration-3378000015c6\n// https://openweathermap.org/weather-conditions#Weather-Condition-Codes-2\nfunction App() {\n    const [searchQuery, changeSearchQuery] = useState('');\n    const [mainComponent, setMainComponent] = useState<any>(<Welcome />);\n    const [image, setImage] = useState<string | null>(null);\n\n    const handleSubmit = async (e: any) => {\n        e.preventDefault();\n        setMainComponent(<Loading />);\n        try {\n            const { lat, lon } = (\n                await Axios.get(\n                    `https://api.openweathermap.org/data/2.5/weather?q=${searchQuery}&units=metric&APPID=${process.env.REACT_APP_WEATHER_KEY}`\n                )\n            ).data.coord;\n            const { data } = await Axios.get(\n                `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&units=metric&appid=${process.env.REACT_APP_WEATHER_KEY}`\n            );\n            setImage(`${data.current.weather[0].main}-image`);\n            setMainComponent(<Dashboard weather={data} />);\n        } catch (err) {\n            setMainComponent(<Error errorMessage={err} />);\n        }\n    };\n\n    return (\n        <div className='App-container'>\n            <div className='App'>\n                <div className='info-container'>\n                    <div className='search-container'>\n                        <form onSubmit={handleSubmit}>\n                            <input\n                                type='text'\n                                className='search'\n                                value={searchQuery}\n                                onChange={(e) => changeSearchQuery(e.target.value)}\n                            />\n                            <button type='submit' className='btn-search fas fa-search'></button>\n                        </form>\n                    </div>\n                    {mainComponent}\n                </div>\n                <div className={`image ${image || 'no-image'}`} />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}